"use strict";(self.webpackChunkalekhaweb=self.webpackChunkalekhaweb||[]).push([[2206],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),m=l(t),u=o,f=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d[m]="string"==typeof e?e:o,a[1]=d;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6937:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const i={sidebar_position:5},a="Models: Choosing from different LLMs and embedding models",d={unversionedId:"Edgechain Modules/Module 1: Choosing from different LLMs and embedding models",id:"Edgechain Modules/Module 1: Choosing from different LLMs and embedding models",title:"Models: Choosing from different LLMs and embedding models",description:"Currently, many different LLMs are emerging. Edgechain offers integrations to a wide range of models and a streamlined interface to all of them.",source:"@site/doc/Edgechain Modules/Module 1: Choosing from different LLMs and embedding models.md",sourceDirName:"Edgechain Modules",slug:"/Edgechain Modules/Module 1: Choosing from different LLMs and embedding models",permalink:"/doc/Edgechain Modules/Module 1: Choosing from different LLMs and embedding models",draft:!1,editUrl:"https://github.com/arakoodev/doc/tree/main/doc/Edgechain Modules/Module 1: Choosing from different LLMs and embedding models.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Example API for edgechains",permalink:"/doc/API documentation/Examples"},next:{title:"Prompts: Managing LLM inputs",permalink:"/doc/Edgechain Modules/Prompts: Managing LLM inputs"}},s={},l=[],p={toc:l},m="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"models-choosing-from-different-llms-and-embedding-models"},"Models: Choosing from different LLMs and embedding models"),(0,o.kt)("p",null,"Currently, many different LLMs are emerging. Edgechain offers integrations to a wide range of models and a streamlined interface to all of them.\nEdgechain differentiates between three types of models that differ in their inputs and outputs:"),(0,o.kt)("p",null,"-LLMs take a string as an input (prompt) and output a string (completion)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'@PostMapping("/chat")\n  public ArkResponse chat(ArkRequest arkRequest) {\n\n    OpenAiEndpoint gpt4Endpoint =\n            new OpenAiEndpoint(\n                    OPENAI_CHAT_COMPLETION_API,\n                    OPENAI_AUTH_KEY,\n                    "gpt-3.5-turbo",\n                    "user",\n                    0.7,\n                    new ExponentialDelay(3, 5, 2, TimeUnit.SECONDS));\n\n    String prompt = "Arakoo has a cat. What animal is Arakoo;s pet";\n\n    EdgeChain<ChatCompletionResponse> chatChain = \n            new EdgeChain<>(gpt4Endpoint.chatCompletion(prompt, "ChatChain", arkRequest));\n\n    return chatChain.getArkResponse();\n  }\n')),(0,o.kt)("p",null,"  -Chat models are similar to LLMs. They take a list of chat messages as input and return a chat message."),(0,o.kt)("p",null,"  -Text embedding models take text input and return a list of floats (embeddings), which are the numerical\nrepresentation of the input text.  Embeddings help extract information from a text.\nThis information can then be later used, e.g., for calculating similarities between texts (e.g., movie summaries)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'@PostMapping("/embedding")\n  public ArkResponse embedding(ArkRequest arkRequest) {\n\n    OpenAiEndpoint ada002Embeddings =\n            new OpenAiEndpoint(\n                    OPENAI_EMBEDDINGS_API,\n                    OPENAI_AUTH_KEY,\n                    "",//orgId\n                    "text-embedding-ada-002",\n                    "user",\n                    0.7,\n                    false,\n                    new ExponentialDelay(3, 3, 2, TimeUnit.SECONDS));;\n\n    String input = "Alice has a parrot. What animal is Alice;s pet";\n\n    EdgeChain<ChatCompletionResponse> embeddingChain =\n            new EdgeChain<>(gpt4Endpoint.embeddings(input, "EmbeddingChianChain", arkRequest));\n\n    return embeddingChain.getArkResponse();\n  }\n')))}c.isMDXComponent=!0}}]);