"use strict";(self.webpackChunkalekhaweb=self.webpackChunkalekhaweb||[]).push([[133],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:8},o="API Reference",p={unversionedId:"API",id:"API",title:"API Reference",description:"SDKs and Client Libraries",source:"@site/doc/API.md",sourceDirName:".",slug:"/API",permalink:"/doc/API",draft:!1,editUrl:"https://github.com/arakoodev/doc/tree/main/doc/API.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Community and Support",permalink:"/doc/Community_and_Support"},next:{title:"Contributing to EdgeChains",permalink:"/doc/Contribute"}},l={},s=[{value:"SDKs and Client Libraries",id:"sdks-and-client-libraries",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"api-reference"},"API Reference"),(0,a.kt)("h2",{id:"sdks-and-client-libraries"},"SDKs and Client Libraries"),(0,a.kt)("p",null,"Follow these steps to effectively use the EdgeChainsSDK:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1:")," Visit ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/arakoodev/EdgeChains/actions"},"EdgeChains actions"),". Click on Latest ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Build and Run"))," and then download Output.zip file."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2:")," Once the download is complete, extract the contents of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Output.zip")," file. Move the extracted folder to your desired directory.hj"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3:")," Open the extracted directory using IntelliJ. The IDE will automatically index the project."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note:")),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},"EdgeChains requires ",(0,a.kt)("strong",{parentName:"li"},"Java version 17")," or above to run. "),(0,a.kt)("li",{parentName:"ul"},"Make sure to use ",(0,a.kt)("strong",{parentName:"li"},"Jbang project"),"."))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 4:")," Begin writing your code and building your LLM applications based on your requirements."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click here for a sample starter file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'{\n  package com.edgechain;\n\nimport com.edgechain.lib.configuration.RedisEnv;\nimport com.edgechain.lib.request.ArkRequest;\nimport com.edgechain.lib.response.ArkResponse;\nimport io.reactivex.rxjava3.core.Observable;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.bind.annotation.*;\n\nimport static com.edgechain.lib.constants.EndpointConstants.*;\n\n@SpringBootApplication\npublic class Starter {\n\n    private final String OPENAI_AUTH_KEY = ""; // YOUR OPENAI KEY\n    private final String PINECONE_AUTH_KEY = ""; // YOUR PINECONE API KEY\n    private final String PINECONE_QUERY_API = ""; // YOUR PINECONE QUERY API\n    private final String PINECONE_UPSERT_API = ""; // YOUR PINECONE UPSERT API\n    private final String PINECONE_DELETE = ""; // YOUR PINECONE DELETE\n\n    public static void main(String[] args) {\n        System.setProperty("server.port", "8080");\n        SpringApplication.run(Starter.class, args);\n    }\n\n\n    @Bean\n    public RedisEnv redisEnv() {\n        RedisEnv redisEnv = new RedisEnv();\n        redisEnv.setUrl("");\n        redisEnv.setPort(12285);\n        redisEnv.setUsername("default");\n        redisEnv.setPassword("");\n        redisEnv.setTtl(3600); // Configuring ttl for HistoryContext;\n        return redisEnv;\n    }\n\n    @RestController\n    @RequestMapping("/v1/examples")\n    public class ExampleController {\n\n      // ArkRequest can only accept Content-Type application/json & multipart/form-data ~ Define explicitly in your client.\n        @GetMapping\n        public ArkResponse m1(ArkRequest arkRequest) {\n            return new ArkResponse(Observable.just("Hello, My Starter API is working...."));\n        }\n\n    }\n\n\n}\n}\n'))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 5:")," For debugging purposes, you have two options; Run the application through IntelliJ or you can use jbang by executing the following command in your terminal: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"java -jar flyfly.jar jbang Starter.java edgechain-app-1.0.0.jar\n")))}d.isMDXComponent=!0}}]);