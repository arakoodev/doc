"use strict";(self.webpackChunkalekhaweb=self.webpackChunkalekhaweb||[]).push([[1790],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||i;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6984:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3},o="Quickstart",s={unversionedId:"Getting started/Quickstart",id:"Getting started/Quickstart",title:"Quickstart",description:"Installation and Usage",source:"@site/doc/Getting started/Quickstart.md",sourceDirName:"Getting started",slug:"/Getting started/Quickstart",permalink:"/doc/Getting started/Quickstart",draft:!1,editUrl:"https://github.com/arakoodev/doc/tree/main/doc/Getting started/Quickstart.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/doc/Getting started/Installation"},next:{title:"Techniques",permalink:"/doc/category/techniques"}},l={},c=[{value:"Installation and Usage",id:"installation-and-usage",level:3},{value:"Run EdgeChains",id:"run-edgechains",level:3},{value:"Understanding EdgeChains",id:"understanding-edgechains",level:2},{value:"Tutorial - Document-based Chatting with EdgeChains",id:"tutorial---document-based-chatting-with-edgechains",level:3}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quickstart"},"Quickstart"),(0,r.kt)("h3",{id:"installation-and-usage"},"Installation and Usage"),(0,r.kt)("p",null,"Install edgechains following instructions outlined in the ",(0,r.kt)("a",{parentName:"p",href:"/doc/Getting%20started/Installation"},"Installation Guide"),". "),(0,r.kt)("h3",{id:"run-edgechains"},"Run EdgeChains"),(0,r.kt)("p",null,"Before running EdgeChains, Ensure that you have completed the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Generate an OpenAI key"),": In order to interact with the language models, EdgeChains requires a valid OpenAI key. You can generate an API key by following the instructions provided by OpenAI.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Create a Redis instance"),": EdgeChains uses Redis for data storage and caching. To proceed, you will need to create a Redis instance. You can create a free Redis instance on ",(0,r.kt)("a",{parentName:"p",href:"https://redislabs.com/"},"Redis Labs"),". Sign up for an account and create a new Redis instance for your EdgeChains application. After creating the Redis instance, ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"take note of the Redis host and port")),", as you will need them for the configuration.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Open the ",(0,r.kt)("inlineCode",{parentName:"p"},"EdgeChainApplication.java")," file and add your ",(0,r.kt)("em",{parentName:"p"},"OPENAI Auth Key"),", inside the Starter class and ",(0,r.kt)("em",{parentName:"p"},"Redis URL, Password")," and ",(0,r.kt)("em",{parentName:"p"},"port")," inside redisenv method of Redisenv class. "))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class Starter {\n\n    private final String OPENAI_AUTH_KEY = ""; // YOUR OPENAI KEY\n    private final String PINECONE_AUTH_KEY = ""; // YOUR PINECONE API KEY\n    private final String PINECONE_QUERY_API = ""; // YOUR PINECONE QUERY API\n    private final String PINECONE_UPSERT_API = ""; // YOUR PINECONE UPSERT API\n    private final String PINECONE_DELETE = ""; // YOUR PINECONE DELETE\n\n    public static void main(String[] args) {\n        System.setProperty("server.port", "8080");\n        SpringApplication.run(Starter.class, args);\n    }\n\n    .\n    .\n    .\n\n     public RedisEnv redisEnv() {\n        RedisEnv redisEnv = new RedisEnv();\n        redisEnv.setUrl(""); //YOUR REDIS URL\n        redisEnv.setPort(); //YOUR REDIS PORT\n        redisEnv.setUsername("default");\n        redisEnv.setPassword(""); // YOUR REDIS PASSWORD\n        redisEnv.setTtl(3600); // Configuring ttl for HistoryContext;\n        return redisEnv;\n    }\n')),(0,r.kt)("p",null,"Once you have completed these steps, you are ready to run EdgeChains either as a service or as an application using jbang, like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# To start the application.\njava -jar flyfly.jar jbang EdgeChainApplication.java edgechain-app-1.0.0.jar\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"understanding-edgechains"},"Understanding EdgeChains"),(0,r.kt)("p",null,"At EdgeChains, we take a unique approach to development, viewing it as a deployment and configuration management challenge rather than solely focusing on the user interface and code library aspects. We understand the difficulties developers face when using OpenAI APIs, which can result in code complexity and prompt-related issues.  To overcome them, we have leveraged the power of jsonnet, the advanced library developed by Google based on their experience managing a vast amount of configuration code in the Borg infrastructure, which underlies their extensive cloud and Kubernetes clusters. And building on top of this, Edgechains gives you:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Versioning for Prompts"),": Prompts are written in jsonnet. Makes them easily versionable and diffable. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Automatic parallelism"),": EdgeChains automatically parallelizes LLM chains & chain-of-thought tasks across CPUs, GPUs, and TPUs using the JVM."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fault tolerance"),": EdgeChains is designed to be fault-tolerant, and can continue to retry & backoff even if some of the requests in the system fail."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Scalability"),": EdgeChains is designed to be scalable, and can be used to write your chain-of-thought applications on large number of APIs, prompt lengths and vector datasets.")),(0,r.kt)("p",null,"With EdgeChains, you can make your product live from day one, thanks to its robust features and seamless integration capabilities."),(0,r.kt)("h3",{id:"tutorial---document-based-chatting-with-edgechains"},"Tutorial - Document-based Chatting with EdgeChains"),(0,r.kt)("p",null,"Sometimes the best way to understand a complicated system is to start by understanding a basic example. The following example illustrates how to run your own Automata agent. The agent will be initialized with a trivial instruction, and will then attempt to write code to fulfill the instruction. The agent will then return the result of its attempt."),(0,r.kt)("p",null,'EdgeChains can be used to chat with a document. For example, you can chat with a document about the topic of "Bitcoin" or "Machine Learning" or any topic of your choice. For this, you can use the ',(0,r.kt)("inlineCode",{parentName:"p"},"EdgeChainService")," class. "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fill in the ",(0,r.kt)("inlineCode",{parentName:"p"},"EdgeChainApplication.java")," file with the appropriate OpenAI and Redis credentials.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the following command in the terminal:   "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"java -jar flyfly.jar jbang EdgeChainServiceApplication.java edgechain-app-1.0.0.jar\n")))),(0,r.kt)("p",null,"Now, you have to create a chat context, similar to a Chat Session in ChatGPT. Use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl  -X POST \\\n'localhost:8080/v1/examples/historycontext' \\\n--header 'Accept: /' \\\n--header 'User-Agent: Thunder Client (https://www.thunderclient.com/)' \\\n--header 'Content-Type: application/json'\n--data-raw '{\n  \"maxTokens\": 4096\n}'\n")),(0,r.kt)("p",null,"You'll get a response like:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click to see the sample response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "historycontext-571b0c2c-8d07-452b-a1d8-96bd5f82234e",\n  "maxTokens": 4096,\n  "message": "Session is created. Now you can start conversational question and answer"\n}\n'))),(0,r.kt)("p",null,"You will receive a response containing an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," for the created session. Make sure to save this ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," for future use."),(0,r.kt)("p",null,"Now, Upsert a document to EdgeChains using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl  -X POST \\\n  'localhost:8080/v1/redis/openai/upsert' \\\n  --header 'Accept: */*' \\\n  --header 'User-Agent: Thunder Client (https://www.thunderclient.com)' \\\n  --form 'file=@./8946-Article Text-12474-1-2-20201228.pdf'\n")),(0,r.kt)("p",null,'Now, it\'s time to start chatting with the document by asking questions. For example, to inquire about the "transformer architecture," use the following command:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl --location 'localhost:8080/v1/examples/redis/openai/chat?query=What%20is%20the%20transformer%20architecture%3F&namespace=machine-learning&id=historycontext%3A50756d25-e7e4-4d7c-862c-f81bf3f8eea0' \\\n--header 'Content-Type: application/json'\n --data-raw '{\n    \"query\": \"What is the transformer architecture?\"\n}\n")),(0,r.kt)("p",null,"Here is a demo using the famous research paper ",(0,r.kt)("a",{parentName:"p",href:"https://arxiv.org/pdf/1706.03762.pdf"},(0,r.kt)("strong",{parentName:"a"},"Attention is all you need")),":"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://s12.gifyu.com/images/SQ6y0.gif",alt:"Demo"})))}u.isMDXComponent=!0}}]);